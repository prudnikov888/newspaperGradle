package db;

import db.exceptions.DaoException;
import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;


/**
 * BaseDao with parameters, that is used to extend other Dao Classes
 */
@Repository
public class BaseDao<T> implements Dao<T> {
    private static Logger log = Logger.getLogger(BaseDao.class);
    public BaseDao() {

    }
    private SessionFactory sessionFactory;

    @Autowired
    public BaseDao (SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public Session currentSession(){
        return sessionFactory.openSession();
    }
    @Override
    public void saveOrUpdate(T t) throws DaoException{
        try {
            Session session = currentSession();
            Transaction transaction = session.beginTransaction();
            session.saveOrUpdate(t);
            log.info("saveOrUpdate(t):" + t);
            log.info("Save or update (commit):" + t);
            transaction.commit();
        } catch (HibernateException e) {
            log.error("Error save or update" + getPersistentClass() + "in Dao" + e);
            throw new DaoException(e);
        }

    }
    @Override
    public T get(Serializable id) throws DaoException {
        log.info("Get class by id:" + id);
        T t = null;
        try {
            Session session = currentSession();
            Transaction transaction = session.beginTransaction();
            t = (T) session.get(getPersistentClass(), id);
            log.info("get clazz:" + t);
            transaction.commit();
        } catch (HibernateException e) {
            log.error("Error get " + getPersistentClass() + " in Dao" + e);
            throw new DaoException(e);
        }
        return t;
    }
    @Override
    public T load(Serializable id) throws DaoException {
        log.info("Load class by id:" + id);
        T t = null;
        try {
            Session session = currentSession();
            Transaction transaction = session.beginTransaction();
            t = (T) session.load(getPersistentClass(), id);
            log.info("load() clazz:" + t);
            session.isDirty();
            transaction.commit();
        } catch (HibernateException e) {
            log.error("Error load() " + getPersistentClass() + " in Dao" + e);
            throw new DaoException(e);
        }
        return t;
    }
    @Override
    public void delete(T t) throws DaoException {
        try {
            Session session = currentSession();
            Transaction transaction = session.beginTransaction();
            session.delete(t);
            log.info("Delete:" + t);
            transaction.commit();
        } catch (HibernateException e) {
            log.error("Error save or update" + getPersistentClass() + "in Dao" + e);
            throw new DaoException(e);
        }
    }
    private Class getPersistentClass() {
        return (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    }
}
