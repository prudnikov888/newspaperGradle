package db;

import db.exceptions.DaoException;
import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pojos.News;

import java.io.Serializable;
import java.util.List;

@Repository("newsDaoTest")
public class NewsDaoTest {

    private static Logger log = Logger.getLogger(BaseDao.class);
    public NewsDaoTest() {

    }
    private SessionFactory sessionFactory;

    @Autowired
    public NewsDaoTest (SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    public Session currentSession(){
        return sessionFactory.getCurrentSession();
    }
    /**
     *
     * @param selectedPage - number of page that has been selected by the user
     * @param newsOnPage - number of news on the page
     * @return List of news that would be displayed for the user
     */
    public List<News> getNewsList(int selectedPage, int newsOnPage, String sortBy) {
        Session session = currentSession();
        String hql;
        if (sortBy.equals("postDay")) {
            hql = "SELECT N FROM News N ORDER BY N.postDay DESC";
        }
        else
            hql = "SELECT N FROM News N ORDER BY N.category.categoryName ASC";
        Query query = session.createQuery(hql);
        query.setFirstResult((selectedPage - 1)*newsOnPage);
        query.setMaxResults(newsOnPage);
        List <News> results = query.list();
        return results;
    }
    /**
     *
     * @return number of all news in the database
     */
    public int countAllNews() {
        Session session = currentSession();
        String hql = "FROM News";
        Query query = session.createQuery(hql);
        List<News> results = query.list();
        return results.size();
    }
    public void saveOrUpdate(News news) throws DaoException {
        try {
            Session session = currentSession();
            session.saveOrUpdate(news);
            log.info("saveOrUpdate(t):" + news);
            log.info("Save or update (commit):" + news);
        } catch (HibernateException e) {
            log.error("Error save or update " + "News" + "in Dao" + e);
            throw new DaoException(e);
        }

    }
       public News get(Serializable id) throws DaoException {
        log.info("Get class by id:" + id);
        News news = null;
        try {
            Session session = currentSession();
            news = (News) session.get(News.class, id);
            log.info("get clazz:" + news);
        } catch (HibernateException e) {
            log.error("Error get " + "News" + " in Dao" + e);
            throw new DaoException(e);
        }
        return news;
    }

    public News load(Serializable id) throws DaoException {
        log.info("Load class by id:" + id);
        News news = null;
        try {
            Session session = currentSession();
            news = (News) session.load(News.class, id);
            log.info("load() clazz:" + news);
            session.isDirty();
        } catch (HibernateException e) {
            log.error("Error load() " + "News" + " in Dao" + e);
            throw new DaoException(e);
        }
        return news;
    }
    public void delete(News news) throws DaoException {
        try {
            Session session = currentSession();
            session.delete(news);
            log.info("Delete:" + news);
        } catch (HibernateException e) {
            log.error("Error save or update" + "News" + "in Dao" + e);
            throw new DaoException(e);
        }
    }

}
